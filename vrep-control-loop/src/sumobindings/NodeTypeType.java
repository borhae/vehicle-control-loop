//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0-b170531.0717 
//         See <a href="https://jaxb.java.net/">https://jaxb.java.net/</a> 
//         Any modifications to this file will be lost upon recompilation of the source schema. 
//         Generated on: 2018.01.03 at 06:19:16 PM CET 
//


package sumobindings;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for nodeTypeType.
 * 
 * <p>The following schema fragment specifies the expected         content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="nodeTypeType"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="traffic_light"/&gt;
 *     &lt;enumeration value="right_before_left"/&gt;
 *     &lt;enumeration value="priority"/&gt;
 *     &lt;enumeration value="dead_end"/&gt;
 *     &lt;enumeration value="unregulated"/&gt;
 *     &lt;enumeration value="traffic_light_unregulated"/&gt;
 *     &lt;enumeration value="rail_signal"/&gt;
 *     &lt;enumeration value="allway_stop"/&gt;
 *     &lt;enumeration value="priority_stop"/&gt;
 *     &lt;enumeration value="zipper"/&gt;
 *     &lt;enumeration value="rail_crossing"/&gt;
 *     &lt;enumeration value="traffic_light_right_on_red"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "nodeTypeType")
@XmlEnum
public enum NodeTypeType {

    @XmlEnumValue("traffic_light")
    TRAFFIC_LIGHT("traffic_light"),
    @XmlEnumValue("right_before_left")
    RIGHT_BEFORE_LEFT("right_before_left"),
    @XmlEnumValue("priority")
    PRIORITY("priority"),
    @XmlEnumValue("dead_end")
    DEAD_END("dead_end"),
    @XmlEnumValue("unregulated")
    UNREGULATED("unregulated"),
    @XmlEnumValue("traffic_light_unregulated")
    TRAFFIC_LIGHT_UNREGULATED("traffic_light_unregulated"),
    @XmlEnumValue("rail_signal")
    RAIL_SIGNAL("rail_signal"),
    @XmlEnumValue("allway_stop")
    ALLWAY_STOP("allway_stop"),
    @XmlEnumValue("priority_stop")
    PRIORITY_STOP("priority_stop"),
    @XmlEnumValue("zipper")
    ZIPPER("zipper"),
    @XmlEnumValue("rail_crossing")
    RAIL_CROSSING("rail_crossing"),
    @XmlEnumValue("traffic_light_right_on_red")
    TRAFFIC_LIGHT_RIGHT_ON_RED("traffic_light_right_on_red");
    private final String value;

    NodeTypeType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static NodeTypeType fromValue(String v) {
        for (NodeTypeType c: NodeTypeType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
